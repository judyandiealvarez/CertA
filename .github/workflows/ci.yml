name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: judyandiealvarez/certa

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore CertA/CertA.csproj

      - name: Build
        run: dotnet build CertA/CertA.csproj --no-restore

      - name: Test
        run: dotnet test CertA/CertA.csproj --no-build --verbosity normal

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    environment: public
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          registry: docker.io

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest
            type=sha,prefix={{branch}}-sha-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: CertA/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: swarm
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Docker Swarm status
        run: |
          echo "Checking Docker Swarm status..."
          docker info --format '{{.Swarm.LocalNodeState}}'
          docker node ls

      - name: Pull Docker image
        run: |
          echo "Pulling Docker image from Docker Hub..."
          docker pull ${{ env.IMAGE_NAME }}:main

      - name: Deploy stack
        run: |
          echo "Deploying stack 'certa'..."
          

          
          # Check if stack already exists
          if docker stack ls | grep -q "certa"; then
            echo "Updating existing stack..."
            docker stack deploy -c docker-compose.swarm.yml certa
          else
            echo "Creating new stack..."
            docker stack deploy -c docker-compose.swarm.yml certa
          fi

      - name: Wait for services
        run: |
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Check service status
          echo "Checking service status..."
          docker stack services certa
          
          # Wait for all services to be running
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Checking service readiness (attempt $attempt/$max_attempts)..."
            
            if docker stack services certa --format "table {{.Name}}\t{{.Replicas}}\t{{.Ports}}" | grep -q "0/"; then
              echo "Some services are not ready yet, waiting..."
              sleep 10
              attempt=$((attempt + 1))
            else
              echo "All services are running!"
              break
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "Services failed to start within the expected time"
            docker stack ps certa
            exit 1
          fi

      - name: Health check
        run: |
          echo "Performing health check..."
          
          # Get the node IP where the service is running
          NODE_IP=$(docker node ls --format "table {{.Hostname}}\t{{.Status}}\t{{.Availability}}" | grep "Ready" | head -1 | awk '{print $1}')
          
          if [ -z "$NODE_IP" ]; then
            NODE_IP="localhost"
          fi
          
          HEALTH_CHECK_URL="http://$NODE_IP:8080"
          echo "Health check URL: $HEALTH_CHECK_URL"
          
          # Try to connect to the application
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -f -s "$HEALTH_CHECK_URL" > /dev/null; then
              echo "Health check passed! Application is responding."
              break
            else
              echo "Health check failed, retrying in 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          # Final health check
          if ! curl -f -s "$HEALTH_CHECK_URL" > /dev/null; then
            echo "Health check failed after all attempts"
            exit 1
          fi

      - name: Show deployment status
        run: |
          echo "Deployment completed successfully!"
          echo "Stack services:"
          docker stack services certa
          echo
          echo "Service details:"
          docker stack ps certa

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install dotnet-format
        run: dotnet tool install -g dotnet-format

      - name: Check formatting
        run: dotnet format --verify-no-changes --verbosity diagnostic

  dockerfile-lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: CertA/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif
