name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*', '*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: judyandiealvarez/certa

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore CertA/CertA.csproj

      - name: Build application
        run: dotnet build CertA/CertA.csproj --no-restore

      - name: Run tests
        run: dotnet test CertA/CertA.csproj --no-build --verbosity normal

  build:
    runs-on: ubuntu-latest
    needs: test
    environment: public
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Extract version from tag (remove 'v' prefix if present)
            TAG_NAME=${GITHUB_REF#refs/tags/}
            if [[ $TAG_NAME == v* ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
            echo "tag=$VERSION" >> $GITHUB_OUTPUT
            echo "Building tagged version: $VERSION"
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "Building latest version from main branch"
          else
            echo "tag=main" >> $GITHUB_OUTPUT
            echo "Building main version from non-main branch"
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }} -f CertA/Dockerfile .

      - name: Push to Docker Hub
        run: docker push ${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}

      - name: Show pushed image
        run: |
          echo "Successfully pushed image: ${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}"
          docker images | grep ${{ env.IMAGE_NAME }}

  deploy:
    runs-on: swarm
    needs: build
    environment: public
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull Docker image
        run: docker pull ${{ env.IMAGE_NAME }}:latest

      - name: Deploy to Swarm
        run: docker stack deploy -c docker-compose.swarm.yml certa

      - name: Wait for services
        run: sleep 30

      - name: Health check
        run: |
          # Check if service is running and get node info
          docker service ls | grep certa
          docker stack ps certa --format "table {{.Node}}\t{{.CurrentState}}"
          echo "Health check completed - service status shown above"

      - name: Show deployment status
        run: docker stack services certa

  deploy-tagged:
    runs-on: swarm
    needs: build
    environment: public
    if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: |
          # Extract version from tag (remove 'v' prefix if present)
          TAG_NAME=${GITHUB_REF#refs/tags/}
          if [[ $TAG_NAME == v* ]]; then
            VERSION=${TAG_NAME#v}
          else
            VERSION=$TAG_NAME
          fi
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying tagged version: $VERSION"

      - name: Pull Docker image
        run: docker pull ${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}

      - name: Deploy to Swarm with tagged image
        run: |
          # Update docker-compose to use the specific tagged image
          sed -i "s|image: ${{ env.IMAGE_NAME }}:latest|image: ${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}|g" docker-compose.swarm.yml
          docker stack deploy -c docker-compose.swarm.yml certa

      - name: Wait for services
        run: sleep 30

      - name: Health check
        run: |
          # Check if service is running and get node info
          docker service ls | grep certa
          docker stack ps certa --format "table {{.Node}}\t{{.CurrentState}}"
          echo "Health check completed - service status shown above"

      - name: Show deployment status
        run: docker stack services certa

      - name: Show deployed image
        run: |
          echo "Successfully deployed image: ${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}"
          docker service inspect certa_certa-app --format '{{.Spec.TaskTemplate.ContainerSpec.Image}}'
