name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: judyandiealvarez/certa

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore CertA/CertA.csproj

      - name: Build
        run: dotnet build CertA/CertA.csproj --no-restore

      - name: Test
        run: dotnet test CertA/CertA.csproj --no-build --verbosity normal

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    environment: public
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check DockerHub secrets
        if: github.event_name != 'pull_request' && github.ref != 'refs/heads/main'
        env:
          DHU: ${{ secrets.DOCKERHUB_USERNAME }}
          DHT: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          if [ -z "$DHU" ] || [ -z "$DHT" ]; then
            echo "DOCKERHUB_USERNAME or DOCKERHUB_TOKEN is not set (empty)" >&2
            exit 1
          fi

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && github.ref != 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          registry: docker.io

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,enable=${{ github.ref != 'refs/heads/main' }}
            type=raw,value=latest,enable=${{ github.ref != 'refs/heads/main' }}
            type=sha,prefix={{branch}}-sha-,enable=${{ github.ref != 'refs/heads/main' }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: CertA/Dockerfile
          push: ${{ github.event_name != 'pull_request' && github.ref != 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install dotnet-format
        run: dotnet tool install -g dotnet-format

      - name: Check formatting
        run: dotnet format --verify-no-changes --verbosity diagnostic

  dockerfile-lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: CertA/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif
