name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  IMAGE_NAME: judyandiealvarez/certa

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: public
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          registry: docker.io

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: CertA/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        if: steps.meta.outputs.version != ''

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  create-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual dispatch, get all commits
            CHANGELOG=$(git log --oneline --no-merges | head -20)
          else
            # For tag push, get commits since last tag
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [ -n "$PREVIOUS_TAG" ]; then
              CHANGELOG=$(git log --oneline --no-merges $PREVIOUS_TAG..HEAD)
            else
              CHANGELOG=$(git log --oneline --no-merges | head -20)
            fi
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: CertA ${{ steps.get_version.outputs.version }}
          body: |
            ## CertA (Certification Authority) ${{ steps.get_version.outputs.version }}
            
            **CertA** is a comprehensive, self-hosted Certification Authority (CA) system built with ASP.NET Core that provides complete certificate management capabilities with user authentication and authorization.

            
            ### üöÄ What's New
            
            This release includes the following changes:
            
            ```
            ${{ steps.changelog.outputs.changelog }}
            ```
            
            ### üì¶ Docker Image
            
            ```bash
            docker pull judyandiealvarez/certa:${{ steps.get_version.outputs.version }}
            ```
            
            ### üõ†Ô∏è Quick Start
            
            ```bash
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git
            cd CertA
            git checkout ${{ steps.get_version.outputs.version }}
            
            # Deploy
            docker-compose up -d
            ```
            
            ### üìö Documentation
            
            - [Installation Guide](https://github.com/${{ github.repository }}/blob/main/docs/installation.md)
            - [Quick Start](https://github.com/${{ github.repository }}/blob/main/docs/quick-start.md)
            - [API Reference](https://github.com/${{ github.repository }}/blob/main/docs/api-reference.md)
            
            ### üîß Features
            
            - **Certificate Authority**: Self-signed root CA with 4096-bit RSA keys
            - **Web Management**: Modern ASP.NET Core interface with user authentication
            - **Database Storage**: PostgreSQL for certificates, users, and configuration
            - **Authentication**: ASP.NET Core Identity with role-based access
            - **Multiple Formats**: PEM, PFX/PKCS#12 certificate formats
            - **Production Ready**: Secure configuration and best practices
            
            ### üê≥ Docker Compose
            
            ```yaml
            version: '3.8'
            services:
              postgres:
                image: postgres:15-alpine
                environment:
                  POSTGRES_DB: certa
                  POSTGRES_USER: certa
                  POSTGRES_PASSWORD: your_secure_password
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                ports:
                  - "5433:5432"

              certa-app:
                image: judyandiealvarez/certa:${{ steps.get_version.outputs.version }}
                ports:
                  - "8080:8080"
                environment:
                  - ASPNETCORE_ENVIRONMENT=Production
                  - ConnectionStrings__DefaultConnection=Host=postgres;Database=certa;Username=certa;Password=your_secure_password;Port=5432
                depends_on:
                  - postgres
                volumes:
                  - ./logs:/app/logs
                  - ./ca-keys:/app/ca-keys

            volumes:
              postgres_data:
            ```
            
            ### üîí Security
            
            This release has been scanned for vulnerabilities using Trivy.
            
            ### üìÑ License
            
            This project is licensed under the GNU Lesser General Public License v3.0.
          draft: false
          prerelease: false
