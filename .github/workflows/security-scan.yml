name: Security Scan

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore CertA/CertA.csproj

      - name: Build
        run: dotnet build CertA/CertA.csproj --no-restore

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  trivy-fs-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy filesystem vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy filesystem scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  trivy-image-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Debug job execution
        run: |
          echo "Job: trivy-image-scan"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Is tag: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "Should run: ${{ startsWith(github.ref, 'refs/tags/') }}"
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Run Trivy Docker image vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: judyandiealvarez/certa:${{ steps.get_version.outputs.version }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Create fallback SARIF file for image scan
        if: always()
        run: |
          # Create a minimal SARIF file if Trivy didn't generate one
          if [ ! -f "trivy-image-results.sarif" ]; then
            cat > trivy-image-results.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "version": "0.64.1",
                    "informationUri": "https://github.com/aquasecurity/trivy"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi

      - name: Upload Trivy image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  dependency-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install dotnet list package
        run: dotnet tool install -g dotnet-outdated-tool

      - name: Check for outdated packages
        run: |
          echo "Checking for outdated packages..."
          dotnet outdated --upgrade
          
      - name: Check for vulnerable packages
        run: |
          echo "Checking for vulnerable packages..."
          dotnet list package --vulnerable

  dockerfile-security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: CertA/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  secret-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        run: |
          # Run TruffleHog and capture output
          trufflehog --only-verified --json . > trufflehog-output.json || true
          
          # Convert TruffleHog JSON output to SARIF format
          cat > trufflehog-results.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "TruffleHog",
                    "version": "3.90.5",
                    "informationUri": "https://github.com/trufflesecurity/trufflehog"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          
          # If TruffleHog found secrets, convert them to SARIF format
          if [ -s "trufflehog-output.json" ]; then
            echo "Converting TruffleHog results to SARIF format..."
            # Create a proper SARIF file with actual results
            cat > trufflehog-results.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "TruffleHog",
                    "version": "3.90.5",
                    "informationUri": "https://github.com/trufflesecurity/trufflehog"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi

      - name: Upload TruffleHog results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trufflehog-results.sarif
